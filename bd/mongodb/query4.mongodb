
use('sample_training')
// buscar las ciudades que tengan una poblacion 
// mayor a 100000

db.zips.find(
    {
        pop: { $gt: 100000}
    }
);

// buscar los documentos
// en los que la ubicacion este
// entre 80 y 150 para 'x'
// 20 y 100 para 'y'


use('sample_training')
db.zips.find(
    {
        $and: [
            {
                "loc.x": { $gte: 80 },
                "loc.x": { $lte: 150 }
            },
            {
                "loc.y": { $gte: 20 },
                "loc.y": { $lte: 100}
            }
        ]
    }
);
use('sample_training')
db.zips.find(
    {
    },
    {
        city: true,
        pop: true,
        state: true
    }
);



use('sample_training')
db.zips.aggregate(
    {
        $match: { 
            state: 'AL'
        }
    },
    {
        $sort: {
            city: -1
        }
    },
    {
        $group: {
            "_id": "$zip"
        }
    }
    
);


// match: todos los documentos en el que el campo
// pop sea mayor o igual que 100K

// group: agruparlos por el campo state

use('sample_training')
db.zips.aggregate(
    {
        $match: {
            pop: { $gte: 100000 }
        }
    },
    {
        $group: {
            "_id": "$state"
        }
    }
);



use('sample_training')
db.zips.aggregate(
    {
        $match: { 
            state: 'AL'
        }
    },
    {
        $sort: {
            city: -1
        }
    },
    {
        $group: {
            "_id": "$zip"
        }
    }
    
);

// sample_training
// posts
// filtrar por autor ('machine')
// sort por fecha de forma ascendente

use('sample_training')

db.posts.aggregate(
    {
        $match: {
            title: 'US Constitution'
        }
    },
    {
        $sort: {
            permalink: -1
        }
    },
    {
        $project: {
            comments: 0,
            tags: 0
        }
    }
);

// return los estados con una poblacion
// mayor a los 10M


use('sample_training')
db.zips.aggregate(
    {
        $group: {
            "_id": "$state",
            "totalPop": { $sum: "$pop"}
        }
    },
    {
        $match: {
            totalPop: { $gt: 10000000}
        }
    }
);

// $avg


// retornar la poblacion promedio por ciudad de un estado

//promedio pob por estado
use('sample_training')
db.zips.aggregate(
    {
        $group:{
            _id: { state: "$state", city: "$city"},
            pop: { "$sum": "$pop"}
        }
    },
    {
        $group: {
            "_id": "$_id.state",
            avgCity: { $avg: "$pop"}
        }
    }
);

// retornar la ciudad mas grande y mas pequenia
// por estado

// group por estado
// sort
// $first
// $last


use('db1')
db.test.insertMany(
    [
        { "_id" : 1, "item" : "abc", "price" : 10, "quantity" : 2, "date" : ISODate("2014-01-01T08:00:00Z") },
        { "_id" : 2, "item" : "jkl", "price" : 20, "quantity" : 1, "date" : ISODate("2014-02-03T09:00:00Z") },
        { "_id" : 3, "item" : "xyz", "price" : 5, "quantity" : 5, "date" : ISODate("2014-02-03T09:05:00Z") },
        { "_id" : 4, "item" : "abc", "price" : 10, "quantity" : 10, "date" : ISODate("2014-02-15T08:00:00Z") },
        { "_id" : 5, "item" : "xyz", "price" : 5, "quantity" : 10, "date" : ISODate("2014-02-15T09:05:00Z") },
    ]
);
use('db1')
db.test.aggregate(
    [
      {
        $group:
          {
            _id: "$item",
            minQuantity: { $min: "$quantity" }
          }
      }
    ]
 )

// retornar la ciudad mas grande y mas pequenia
// por estado

// group por estado
// sort
// $first
// $last
 use('sample_training')
 db.zips.aggregate(
    {
        $group: {
            _id: { state: "$state", city: "$city"},
            pop: { "$sum": "$pop"}
        }
    },
    {
        $sort: {
            pop: 1
        }
    },
    {
        $group: {
            _id: "$_id.state",
            ciudadMasGrande: { $last: "$_id.city"},
            popMasGrande: { $last: "$pop"},
            ciudadMasPequenia: { $first: "$_id.city"},
            popMasPequenio: { $first: "$pop"}
        }
    }
 );


use('db1')
db.test.aggregate(
    [
      {
        $group:
          {
            _id: "$item",
            minQuantity: { $min: "$quantity" }
          }
      }
    ]
)

use('sample_training')
db.zips.aggregate(
   {
       $group: {
           _id: { state: "$state", city: "$city"},
           pop: { "$sum": "$pop"}
       }
   },
   {
        $group: {
            _id: "$_id.state",
            cities: {
                $push: {
                    city: "$_id.city",
                    pop: "$pop"
                }
            }
        }
   }
);